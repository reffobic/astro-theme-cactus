---
import type { DesignProject } from "@/data/designs";

interface Props {
  project: DesignProject;
}

const { project } = Astro.props;
const projectId = project.title.toLowerCase().replace(/\s+/g, '-');
const thumbnail = project.images.find(img => img.thumbnail) || project.images[0];
---

<article class="group relative">
  <div class="relative overflow-hidden rounded-lg bg-[color:var(--color-global-bg)]">
    {thumbnail && (
      <img
        src={thumbnail.url}
        alt={thumbnail.alt}
        class="w-full h-auto transition-transform duration-300 group-hover:scale-105 cursor-pointer"
        loading="lazy"
        id={`project-${projectId}`}
        onclick={`document.getElementById('modal-${projectId}').showModal()`}
      />
    )}
    
    <button 
      class="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-20 transition-all duration-300 flex items-center justify-center opacity-0 group-hover:opacity-100 w-full h-full border-0 p-0 m-0 cursor-pointer"
      onclick={`document.getElementById('modal-${projectId}').showModal()`}
    >
      <span class="text-white font-medium px-4 py-2 bg-black bg-opacity-70 rounded-full text-sm">
        View Project
      </span>
    </button>
    
    <dialog id={`modal-${projectId}`} class="modal">
      <div class="modal-box max-w-6xl p-0 overflow-hidden">
        <form method="dialog" class="absolute right-4 top-4 z-10">
          <button class="btn btn-sm btn-circle btn-ghost text-lg" aria-label="Close">✕</button>
        </form>
        
        <div class="flex flex-col md:flex-row h-full">
          {/* Left Column - Project Details */}
          <div class="w-full md:w-2/5 p-6 md:p-8 overflow-y-auto">
            <div class="h-full flex flex-col">
              <div class="flex-1">
                <h3 class="text-2xl font-bold mb-2">{project.title}</h3>
                <p class="text-sm text-[color:var(--color-global-text)] opacity-70 mb-4">
                  {project.category} • {project.date}
                  {project.client && ` • ${project.client}`}
                </p>
                
                <p class="text-[color:var(--color-global-text)] mb-6">
                  {project.description}
                </p>
                
                {project.tags && project.tags.length > 0 && (
                  <div class="flex flex-wrap gap-2 mb-6">
                    {project.tags.map((tag) => (
                      <span class="badge badge-outline text-xs">{tag}</span>
                    ))}
                  </div>
                )}
              </div>
              
              {project.detailsUrl && (
                <div class="mt-auto pt-4 border-t border-[color:var(--color-border)]">
                  <a 
                    href={project.detailsUrl} 
                    class="btn btn-primary w-full sm:w-auto"
                    target="_blank"
                    rel="noopener noreferrer"
                  >
                    View Project
                  </a>
                </div>
              )}
            </div>
          </div>
          
          {/* Right Column - Project Images */}
          <div class="w-full md:w-3/5 bg-gray-100 dark:bg-gray-800 p-6 overflow-y-auto">
            <div class="space-y-6">
              {project.images.map((image) => (
                <img 
                  src={image.url} 
                  alt={image.alt} 
                  class="w-full h-auto rounded-lg shadow-md"
                  loading="lazy"
                />
              ))}
            </div>
          </div>
        </div>
      </div>
      
      <form method="dialog" class="modal-backdrop">
        <button>close</button>
      </form>
    </dialog>
    
    <script define:vars={{ projectId }}>
      // Handle click outside to close the modal
      document.addEventListener('DOMContentLoaded', () => {
        const modal = document.getElementById(`modal-${projectId}`) as HTMLDialogElement;
        if (!modal) return;
        
        // Close when clicking on the backdrop
        modal.addEventListener('click', (e) => {
          if (e.target === modal) {
            modal.close();
          }
        });
        
        // Prevent clicks inside the modal content from closing it
        const modalBox = modal.querySelector('.modal-box');
        if (modalBox) {
          modalBox.addEventListener('click', (e) => {
            e.stopPropagation();
          });
        }
      });
    </script>
  </div>
  
  <div class="mt-3">
    <h3 class="font-medium text-[color:var(--color-global-text)]">
      {project.title}
    </h3>
    <p class="text-sm text-[color:var(--color-global-text)] opacity-70">
      {project.category} • {project.date}
    </p>
  </div>
</article>

<style>
  article {
    transition: transform 0.3s ease;
  }

  article:hover {
    transform: translateY(-4px);
  }

  article img {
    aspect-ratio: 1 / 1;
    object-fit: cover;
  }

  /* Modal Styles */
  .modal {
    margin: auto;
    width: 90%;
    max-width: 90vw;
    height: 90vh;
    max-height: 90vh;
    border: none;
    border-radius: 0.75rem;
    padding: 0;
    overflow: hidden;
    background: transparent;
    cursor: pointer; /* Indicates the backdrop is clickable */
  }
  
  .modal-box {
    cursor: auto; /* Reset cursor for the modal content */
  }

  .modal::backdrop {
    background: rgba(0, 0, 0, 0.8);
    backdrop-filter: blur(4px);
  }

  .modal-box {
    display: flex;
    flex-direction: column;
    height: 100%;
    max-height: 90vh;
    padding: 0;
    overflow: hidden;
    background: var(--color-global-bg);
    border-radius: 0.75rem;
    box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.3);
  }

  /* Responsive layout */
  @media (max-width: 768px) {
    .modal-box {
      flex-direction: column;
    }
    
    .modal-box > div {
      width: 100% !important;
      max-height: 50% !important;
    }
  }
  
  /* Custom scrollbar for the modal content */
  .modal-box::-webkit-scrollbar {
    width: 8px;
  }

  .modal-box::-webkit-scrollbar-track {
    background: transparent;
  }

  .modal-box::-webkit-scrollbar-thumb {
    background-color: rgba(255, 255, 255, 0.2);
    border-radius: 4px;
  }

  .modal-backdrop {
    display: none;
  }
</style>
